"""add process metadata

Revision ID: b6009c870307
Revises: 36cd96f7dc3c
Create Date: 2020-11-03 13:55:42.997688

"""
from alembic import op
import fastapi_utils.guid_type
import geoalchemy2.types
import sqlalchemy as sa
import sqlalchemy_utils


# revision identifiers, used by Alembic.
revision = 'b6009c870307'
down_revision = '36cd96f7dc3c'
branch_labels = None
depends_on = None

DATA = """
'add_dimension','Add a new dimension','Adds a new named dimension to the data cube. Afterwards, the dimension can be referenced with the specified `name`. If a dimension with the specified name exists, the process fails with a `DimensionExists` error. The dimension label of the dimension is set to the specified `label`.','["cubes"]','[{"name": "data","description": "A data cube to add the dimension to.","schema": {"type": "object","subtype": "raster-cube"}},{"name": "name","description": "Name for the dimension.","schema": {"type": "string"}},{"name": "label","description": "A dimension label.","schema": [{"type": "number"},{"type": "string"}]},{"name": "type","description": "The type of dimension, defaults to `other`.","schema": {"type": "string","enum": ["spatial","temporal","bands","other"]},"default": "other","optional": true}]','{"description": "The data cube with a newly added dimension. The new dimension has exactly one dimension label. All other dimensions remain unchanged.","schema": {"type": "object","subtype": "raster-cube"}}',NULL,'{"DimensionExists": {"message": "A dimension with the specified name already exists."}}',NULL,NULL
'add','Addition of two numbers','sums up the two numbers `x` and `y` (*x + y*) and returns the computed sum.No-data values are taken into account so that `null` is returned if any element is such a value.The computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.','["math"]','[{"name": "x","description": "The first summand.","schema": {"type": ["number","null"]}},{"name": "y","description": "The second summand.","schema": {"type": ["number","null"]}}]','{"description": "The computed sum of the two numbers.","schema": {"type": ["number","null"]}}','[{"arguments": {"x": 5,"y": 2.5},"returns": 7.5},{"arguments": {"x": -2,"y": -4},"returns": -6},{"arguments": {"x": 1,"y": null},"returns": null}]',Null,'[{"rel": "about","href": "http://mathworld.wolfram.com/Sum.html","title": "Sum explained by Wolfram MathWorld"},{"rel": "about","href": "https://ieeexplore.ieee.org/document/8766229","title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"}]','{"sum": {"process_id": "sum","arguments": {"data": [{"from_parameter": "x"},{"from_parameter": "y"}],"ignore_nodata": false},"result": true}}'
""".strip()

DATA = ",\n".join([f"({row})" for row in DATA.splitlines()])

SQL_UP = f"INSERT INTO process(id, summary, description, categories, parameters, returns, examples, exceptions, links, process_graph) VALUES {DATA}"

SQL_DOWN = "DELETE FROM process"




def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(SQL_UP)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(SQL_DOWN)
    # ### end Alembic commands ###
